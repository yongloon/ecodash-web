// prisma/schema.prisma

datasource db {
  provider = "postgresql" // Or your chosen provider: "mysql", "sqlite", "sqlserver", "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  username              String?                @unique
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  passwordHash          String?
  accounts              Account[]
  sessions              Session[]
  favoriteIndicators    FavoriteIndicator[]
  stripeCustomerId      String?                @unique @map("stripe_customer_id")
  stripeSubscriptionId  String?                @unique @map("stripe_subscription_id")
  stripePriceId         String?                @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime?             @map("stripe_current_period_end")
  alerts                UserAlert[]
  role                  UserRole               @default(USER) // <<< ADDED THIS

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  email     String   // Storing email here for faster lookup if needed, though userId is primary key
  token     String   @unique
  expiresAt DateTime

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([email]) // If you plan to query by email often for tokens
}

model FavoriteIndicator {
  id          String   @id @default(cuid())
  userId      String
  indicatorId String
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, indicatorId]) // Ensures a user can't favorite the same indicator multiple times
  @@index([userId])
}

model UserAlert {
  id          String   @id @default(cuid())
  userId      String
  indicatorId String
  targetValue Float
  condition   String 
  triggeredAt DateTime?
  isEnabled   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, indicatorId, targetValue, condition]) 
  @@index([userId])
}