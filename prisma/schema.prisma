// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  passwordHash  String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  favoriteIndicators FavoriteIndicator[] // If you implement favorites later
  // annotations UserAnnotation[]      // If you implement annotations later

  // --- STRIPE RELATED FIELDS ---
  stripeCustomerId       String?   @unique // Stripe Customer ID
  stripeSubscriptionId   String?   @unique // Active Stripe Subscription ID
  stripePriceId          String?            // ID of the price for the active subscription
  stripeCurrentPeriodEnd DateTime?          // When the current subscription period ends
  // --- END STRIPE RELATED FIELDS ---

  // PasswordResetToken PasswordResetToken[] // If you implement password reset
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique // Store the HASHED token
  email     String   // To quickly find tokens by email for cleanup
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([email])
}

model FavoriteIndicator {
  id          String   @id @default(cuid())
  userId      String
  indicatorId String   // The ID string from your src/lib/indicators.ts (e.g., "GDP_REAL")
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, indicatorId]) // A user can only favorite an indicator once
  @@index([userId]) // Good for querying a user's favorites
}

model UserAlert {
  id          String   @id @default(cuid())
  userId      String
  indicatorId String
  targetValue Float
  condition   String // "ABOVE" or "BELOW"
  triggeredAt DateTime? // When the alert was last triggered
  isEnabled   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, indicatorId, targetValue, condition]) // Prevent duplicate identical alerts
  @@index([userId])
}