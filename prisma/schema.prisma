// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or your chosen DB: "mysql", "sqlserver", "mongodb", "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                       String    @id @default(cuid())
  name                     String?
  username                 String?   @unique
  email                    String?   @unique
  emailVerified            DateTime?
  image                    String?
  passwordHash             String?
  accounts                 Account[]
  sessions                 Session[]
  role                     UserRole  @default(USER)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  favoriteIndicators       FavoriteIndicator[]
  alerts                   UserAlert[]
  stripeCustomerId         String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId     String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId            String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd   DateTime? @map(name: "stripe_current_period_end")
  passwordResetTokens      PasswordResetToken[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FavoriteIndicator {
  id          String   @id @default(cuid())
  userId      String
  indicatorId String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, indicatorId])
}

enum AlertCondition {
  ABOVE
  BELOW
}

model UserAlert {
  id            String         @id @default(cuid())
  userId        String
  indicatorId   String
  targetValue   Float
  condition     AlertCondition
  isEnabled     Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  triggeredAt   DateTime?      // Last time this alert was triggered
  lastCheckedAt DateTime?      // Last time the system checked this alert's condition
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  email     String   // Store email for easier lookup if needed, though userId is primary key
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}